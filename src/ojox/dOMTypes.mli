(*
 * This file is part of ojox, a library for web browser programming
 * Copyright (C) 2010 Jacob Donham
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *)

(** DOM class type declarations. *)

class type javaScriptObject =
object
end

class type eventTarget =
object
  inherit javaScriptObject
end

class type nativeEvent =
object
  inherit javaScriptObject
end

class type style =
object
  inherit javaScriptObject
end

class type node =
object
  inherit javaScriptObject

  (**
     Adds the node newChild to the end of the list of children of this node. If
     the newChild is already in the tree, it is first removed.
     
     @param newChild The node to add
     @return The node added
   *)
  method appendChild : 'a.'a -> 'a

  (**
     Returns a duplicate of this node, i.e., serves as a generic copy
     constructor for nodes. The duplicate node has no parent; (parentNode is
     null.).
     
     Cloning an Element copies all attributes and their values, including those
     generated by the XML processor to represent defaulted attributes, but this
     method does not copy any text it contains unless it is a deep clone, since
     the text is contained in a child Text node. Cloning an Attribute directly,
     as opposed to be cloned as part of an Element cloning operation, returns a
     specified attribute (specified is true). Cloning any other type of node
     simply returns a copy of this node.
     
     @param deep If true, recursively clone the subtree under the specified
              node; if false, clone only the node itself (and its attributes, if
              it is an {!Element})
     @return The duplicate node
   *)
  method cloneNode : bool -> node

  (**
     A NodeList that contains all children of this node. If there are no
     children, this is a NodeList containing no nodes.
   *)
  method _get_childNodes : node array

  (**
     The first child of this node. If there is no such node, this returns null.
   *)
  method _get_firstChild : node

  (**
     The last child of this node. If there is no such node, this returns null.
   *)
  method _get_lastChild : node

  (**
     The node immediately following this node. If there is no such node, this
     returns null.
   *)
  method _get_nextSibling : node

  (**
     The name of this node, depending on its type; see the table above.
   *)
  method _get_nodeName : string

  (**
     A code representing the type of the underlying object, as defined above.
   *)
  method _get_nodeType : int

  (**
     The value of this node, depending on its type; see the table above. When it
     is defined to be null, setting it has no effect.
   *)
  method _get_nodeValue : string

  (**
     The Document object associated with this node. This is also the
     {!Document} object used to create new nodes.
   *)
  method _get_ownerDocument : document

  (**
     The parent of this node. All nodes except Document may have a parent.
     However, if a node has just been created and not yet added to the tree, or
     if it has been removed from the tree, this is null.
   *)
  method _get_parentNode : node

  (**
     The node immediately preceding this node. If there is no such node, this
     returns null.
   *)
  method _get_previousSibling : node

  (**
     Returns whether this node has any children.
   *)
  method _get_hasChildNodes : bool

  (**
     Inserts the node newChild before the existing child node refChild. If
     refChild is [null], insert newChild at the end of the list of children.
     
     @param newChild The node to insert
     @param refChild The reference node (that is, the node before which the new
              node must be inserted), or [null]
     @return The node being inserted
   *)
  method insertBefore : node -> node -> node

  (**
     Removes the child node indicated by oldChild from the list of children, and
     returns it.
     
     @param oldChild The node being removed
     @return The node removed
   *)
  method removeChild : node -> node

  (**
     Replaces the child node oldChild with newChild in the list of children, and
     returns the oldChild node.
     
     @param newChild The new node to put in the child list
     @param oldChild The node being replaced in the list
     @return The node replaced
   *)
  method replaceChild : node -> node -> node

  (**
     The value of this node, depending on its type; see the table above. When it
     is defined to be null, setting it has no effect.
   *)
  method _set_nodeValue : string -> unit

  constraint 'a = #node
end

and document =
object
  inherit node
end

class type element =
object
  inherit node

  (**
     Removes keyboard focus from this element.
  *)
  method blur : unit

  (**
     Gives keyboard focus to this element.
  *)
  method focus : unit

  (**
     The class attribute of the element. This attribute has been renamed due to
     conflicts with the "class" keyword exposed by many languages.
     
     @see <http://www.w3.org/TR/1999/REC-html401-19991224/struct/global.html#adef-class> W3C HTML Specification
   *)
  method _get_className : string

  (**
     Returns the inner height of an element in pixels, including padding but not
     the horizontal scrollbar height, border, or margin.
     
     @return the element's client height
   *)
  method _get_clientHeight : string

  (**
     Returns the inner width of an element in pixels, including padding but not
     the vertical scrollbar width, border, or margin.
     
     @return the element's client width
   *)
  method _get_clientWidth : string

  (**
     Specifies the base direction of directionally neutral text and the
     directionality of tables.
   *)
  method _get_dir : string

  (**
     Returns a NodeList of all descendant Elements with a given tag name, in the
     order in which they are encountered in a preorder traversal of this Element
     tree.
     
     @param name The name of the tag to match on. The special value "*" matches
              all tags
     @return A list of matching Element nodes
   *)
  method getElementsByTagName : string -> element array

  (**
     The element's identifier.
     
     @see <http://www.w3.org/TR/1999/REC-html401-19991224/struct/global.html#adef-id> W3C HTML Specification
   *)
  method _get_id : string

  (**
     Language code defined in RFC 1766.
   *)
  method _get_lang : string

  (**
     Returns a reference to the object which is the closest (nearest in the
     containment hierarchy) positioned containing element.
   *)
  method _get_offsetParent : element

  (**
     Gets this element's {!Style} object.
   *)
  method _get_style : style

  (**
     The index that represents the element's position in the tabbing order.
     
     @see <http://www.w3.org/TR/1999/REC-html401-19991224/interact/forms.html#adef-tabindex> W3C HTML Specification
  *)
  method _get_tabIndex : int

  (**
     The element's advisory title.
   *)
  method _get_title : string

  (**
     Removes an attribute by name.
   *)
  method removeAttribute : string -> unit

  (**
     Adds a new attribute. If an attribute with that name is already present in
     the element, its value is changed to be that of the value parameter.
     
     @param name The name of the attribute to create or alter
     @param value Value to set in string form
   *)
  method setAttribute : string -> string -> unit

  (**
     The class attribute of the element. This attribute has been renamed due to
     conflicts with the "class" keyword exposed by many languages.
     
     @see <http://www.w3.org/TR/1999/REC-html401-19991224/struct/global.html#adef-class> W3C HTML Specification
   *)
  method _set_className : string -> unit

  (**
     Specifies the base direction of directionally neutral text and the
     directionality of tables.
   *)
  method _set_dir : string -> unit

  (**
     The element's identifier.
     
     @see <http://www.w3.org/TR/1999/REC-html401-19991224/struct/global.html#adef-id> W3C HTML Specification
   *)
  method _set_id : string -> unit

  (**
     Language code defined in RFC 1766.
   *)
  method _set_lang : string -> unit

  (**
     The number of pixels that an element's content is scrolled to the top.
   *)
  method _set_scrollTop : string -> unit
end

class type buttonElement =
object
  inherit element
end

class type inputElement =
object
  inherit element
end

class type optionElement =
object
  inherit element
end

class type scriptElement =
object
  inherit element
end

class type selectElement =
object
  inherit element
end
